/**
 * Generic themes are generated based on three colors(primary, hero, upper) config.
 */
$themesConfig: (
  default: (
    primary: rgb(255, 255, 255),
    hero: rgb(4, 105, 150),
    upper: rgb(0, 146, 176)
  ),
  black: (
    primary: rgb(255, 255, 255),
    hero: rgb(39, 43, 47),
    upper: rgb(39, 43, 47)
  ),
  gray: (
    primary: rgb(255, 255, 255),
    hero: rgb(85, 102, 118),
    upper: rgb(104, 124, 143)
  ),
  white: (
    primary: rgb(0, 146, 176),
    hero: rgb(4, 105, 150),
    upper: rgb(255, 255, 255)
  )
);

/**
 * Color opacities in percentage.
 */
$colorOpacities:(
  primary: 10 20 25 30 40 50 60 70 80,
  hero: 10 20 30 60,
  upper: 40
);

/**
 * Custom theme colors.
 * Additional color keys can be defined or generic can be overridden.
 */
$themes: (
  theme-white: (
    color_upper_40: rgba(4, 105, 150, .4),
    color_hero_70: rgba(4, 105, 150, .7),
  )
);

/**
 * Generates color opacity map.
 * @return [Sass::Script::Value::Map] Color opacity map.
 */
@function getColorOpacityMap($color, $prefix) {
  $opacityList: map-get($colorOpacities, $prefix);
  $colorMap: (color_#{$prefix}: $color);
  @each $opacity in $opacityList {
    $colorMap: map-merge($colorMap, (color_#{$prefix}_#{$opacity}: rgba($color, $opacity / 100)));
  }
  @return $colorMap;
}

/**
 * Generates themes based on $themesConfig
 */
@each $key, $config in $themesConfig {
  $themeMap: ();
  @each $colorKey, $colorVal in $config {
    $themeMap: map-merge($themeMap, getColorOpacityMap($colorVal, $colorKey));
  }
  // Merges custom colors defined in $themes.
  @if map-has-key($themes, theme-#{$key}) {
    $themeMap: map-merge($themeMap, map-get($themes, theme-#{$key}))
  }
  $themes: map-merge($themes, (theme-#{$key}: $themeMap));
}

/* Mixin
-------------------------- */

@mixin themify() {
  @each $theme, $map in $themes {
    $currentTheme: $theme !global;
    .#{$theme} & {
      $theme-map: () !global;
      @each $key, $submap in $map {
        $value: map-get(map-get($themes, $theme), '#{$key}');
        $theme-map: map-merge($theme-map, ($key: $value)) !global;
      }

      @content;
      $theme-map: null !global;
    }
  }
}

/**
 * Returns the value in a theme associated with the given key.
 *
 * @example
 * themed('color_primary') => Returns color_primary for all themes.
 * themed('color_primary', ('theme-white': 'color_upper')) => Returns color_upper value for theme-white, for all themes color_primary.
 * @param $key [Sass::Script::Value::Base]
 * @param $opts [Sass::Script::Value::Map]
 * @return [Sass::Script::Value::Base] The theme value by $key.
 */
@function themed($key, $opts: ()) {
  @each $theme, $optkey in $opts {
    @if $currentTheme == $theme {
      @return map-get($theme-map, $optkey);
    }
  }
  @return map-get($theme-map, $key);
}

/* Generate themes background.
-------------------------- */

@mixin themes_bg() {
  @each $theme, $map in $themes {
    $hero: map-get($map, 'color_hero');
    $upper: map-get($map, 'color_upper');
    $color_primary: map-get($map, 'color_primary');
    .#{$theme} {
      @if $theme == 'theme-white' {
        background-color: rgb(255, 255, 255);
      } @else {
        background-color: $hero;
        background-image: linear-gradient(165deg, $upper, $hero);
      }
      color: $color_primary;
    }
  }
}
